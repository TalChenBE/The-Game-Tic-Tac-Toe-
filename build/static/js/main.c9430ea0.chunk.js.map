{"version":3,"sources":["OnePlace.js","components/Scores.js","components/ButtonCom.js","components/Place.js","GridGame.js","App.js","reportWebVitals.js","index.js"],"names":["typePlayer","template","document","createElement","numClicked","initBord","localStorage","getItem","JSON","parse","emptyBord","i","index","bord","OnePlace","parseInt","getAttribute","innerHTML","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","this","console","log","querySelector","ariaValueText","addEventListener","placebutton","removeEventListener","HTMLElement","window","customElements","define","Scores","showInfo","ButtonCom","Place","GridGame","el","getBord","resetGame","msg","alert","map","setItem","stringify","App","useState","setTypePlayer","numsWinX","setNumsWinX","numsTie","setNumsTie","numsWinO","setNumsWinO","listener","React","useEffect","className","name","onClick","location","reload","slot","flag","retval","bord1","player","win","sqrtSizeBord","Math","sqrt","j","isWin","id","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9430ea0.chunk.js","sourcesContent":["import \"./OnePlace.css\";\nimport * as getPlayer from \"./App\";\n\nconst template = document.createElement(\"template\");\n\nvar typePlayer;\n// const namePlayer = getPlayer.namePlayer;\nvar numClicked = 0;\nvar initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nconst sizeBord = 9;\n\nvar emptyBord = [];\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\nemptyBord[sizeBord] = \"T\";\n\nconst bord = initBord ?? emptyBord;\n\nvar index;\n\nconst style = `<style>\n.place-button {\n    color: white;\n    font-size: xx-large;\n    width: 100px;\n    height: 100px;\n    background: black;\n    border: none;\n    font-weight: bold;\n  }\n\n  .place-button:hover {\n    background-color: rgba(3, 3, 32, 0.884);\n    font-style: italic;\n    color: transparent;\n    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  }\n\n  .place-button:focus {\n    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  }\n</style>`;\n\nfunction setPlayerTypePlace(player) {\n  typePlayer = player;\n  console.log(\"OnePlace view \" + typePlayer);\n}\n\nclass OnePlace extends HTMLElement {\n  constructor() {\n    super();\n    index = parseInt(this.getAttribute(\"name\"), 10);\n    typePlayer = this.getAttribute(\"typePlayer\");\n\n    template.innerHTML =\n      style +\n      ` <button id=\"placeButton\" class=\"place-button\" className=\"lala\">\n          ${bord[index]}\n        </button>\n      `;\n\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  placebutton() {\n    if (bord[this.getAttribute(\"name\")] === \" \") {\n      console.log(\"get: \" + this.getAttribute(\"name\"));\n      bord[this.getAttribute(\"name\")] = this.getAttribute(\"typePlayer\");\n      if (bord[sizeBord] === \"F\") {\n        numClicked = 0;\n        bord[sizeBord] = \"T\";\n      }\n      numClicked++;\n    }\n    this.shadowRoot.querySelector(\"#placeButton\").ariaValueText = \"W\";\n  }\n\n  connectedCallback() {\n    this.shadowRoot\n      .querySelector(\"#placeButton\")\n      .addEventListener(\"click\", () => this.placebutton());\n  }\n  setPlayerType() {\n    if (typePlayer === \"X\") {\n      typePlayer = \"O\";\n    } else {\n      typePlayer = \"X\";\n    }\n  }\n  disconnectedCallback() {\n    this.shadowRoot.querySelector(\"#place-button\").removeEventListener();\n  }\n}\nwindow.customElements.define(\"place-component\", OnePlace);\n\nexport { bord, numClicked, sizeBord, setPlayerTypePlace };\nexport default OnePlace;\n","const template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<style>\n.body {\n  margin: auto;\n  font-family: \"Arial\", sans-serif;\n  max-width: 400px;\n  align-items: center;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  column-gap: 5px;\n  row-gap: 10px;\n  margin-top: 50px;\n}\n</style>\n  <div class=\"body\">\n\n    <h3> Player  ( X ) </h3>\n    <h3> TIE </h3>\n    <h3> Player  ( O ) </h3>\n\n    <h3><slot name=\"px\" /></h3>\n    <h3><slot name=\"tie\" /></h3>\n    <h3><slot name=\"po\" /></h3>\n\n</div>\n`;\n\nclass Scores extends HTMLElement {\n  constructor() {\n    super();\n\n    this.showInfo = true;\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n}\nwindow.customElements.define(\"users-scores\", Scores);\n\nexport default Scores;\n","const template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<style>\n .body button{\n \t\tborder: 20px;\n     border-color: white;\n     border-radius: 5px;\n \t\t padding: 2px 2px;\n     width: 50px;\n     height: 50px; \n     margin-right: 10px;    \n     font-weight: bold;\n  }\n</style>\n  <div class=\"body\">\n    <button id=\"grid-bord\"><slot name=\"compButton\" /></button>\n  </div>\n`;\n\nclass ButtonCom extends HTMLElement {\n  constructor() {\n    super();\n\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  // connectedCallback() {\n  //   this.shadowRoot\n  //     .querySelector(\"#grid-bord\")\n  //     .addEventListener(\"click\", () => handleClickSAVEgame());\n  // }\n  // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#grid-bord\").removeEventListener();\n  // }\n}\nwindow.customElements.define(\"button-component\", ButtonCom);\n\nexport default ButtonCom;\n","import \"./Place.css\";\n\nvar numClicked = 0;\nvar initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nconst sizeBord = 9;\n\nvar emptyBord = [];\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\nemptyBord[sizeBord] = \"T\";\n\nconst bord = initBord ?? emptyBord;\n\nfunction Place(props) {\n  function handleClick() {\n    if (bord[props.name] === \" \") {\n      bord[props.name] = props.player;\n      if (bord[sizeBord] === \"F\") {\n        numClicked = 0;\n        bord[sizeBord] = \"T\";\n      }\n      numClicked++;\n    }\n  }\n\n  return (\n    <button className=\"place-button\" onClick={handleClick}>\n      {bord[props.name]}\n    </button>\n  );\n}\nexport { bord, numClicked, sizeBord };\nexport default Place;\n","// import Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\nimport * as getPlayer from \"./App\";\nimport PlaceWEB from \"./OnePlace\";\nimport \"./GridGame.css\";\n\n// var typePlayer = getPlayer.namePlayer;\n// const sizeBord = getBord.sizeBord;\nvar numClicked = 0;\nvar initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nconst sizeBord = 9;\n\nvar emptyBord = [];\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\nemptyBord[sizeBord] = \"T\";\n\nconst bord = initBord ?? emptyBord;\nvar typePlayer;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    var onClickPlace = this.getAttribute(\"onClickPlace\");\n    var gridRef = this.getAttribute(\"ref\");\n    let el = ``;\n    typePlayer = this.getAttribute(\"name\");\n    for (let i = 0; i < sizeBord; i++) {\n      el += `<place-component id=\"placeBtn\" name=${i} typePlayer=${typePlayer} onClickPlace=\"check\"></place-component>`;\n    }\n    this.innerHTML += `<div class=\"body\"> ${el} </div>`;\n  }\n\n  // attributeChangedCallback(name, oldValue, newValue) {\n  //   console.log(\"grid - typeplayer change!\" + name, oldValue, newValue);\n  // }\n}\nwindow.customElements.define(\"grid-game\", GridGame);\n\nexport default GridGame;\n","import \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\n// import Place from \"./components/Place\";\nimport * as getBord from \"./OnePlace\";\nimport React from \"react\";\nimport Scores from \"./components/Scores\";\nimport ButtonCom from \"./components/ButtonCom\";\nimport GridGame from \"./GridGame.js\";\nimport OnePlace from \"./OnePlace\";\nimport * as getFunc from \"./OnePlace\";\n\nvar bord = getBord.bord;\n\nconst sizeBord = getBord.sizeBord;\nvar numClicked;\n\nvar namePlayer = \"X\";\n\nfunction App() {\n  const [typePlayer, setTypePlayer] = useState(\"X\");\n  const [numsWinX, setNumsWinX] = useState(0);\n  const [numsTie, setNumsTie] = useState(0);\n  const [numsWinO, setNumsWinO] = useState(0);\n\n  // namePlayer = typePlayer;\n  function handleClick() {\n    let flag = true;\n    if (typePlayer === \"X\") {\n      namePlayer = \"O\";\n      setTypePlayer(\"O\");\n    } else {\n      setTypePlayer(\"X\");\n      namePlayer = \"X\";\n    }\n\n    numClicked = getBord.numClicked;\n    var retval = isWin(bord);\n    if (retval === \"X\" || retval === \"O\") {\n      resetGame(\"Congratulations \" + retval + \" won!\", retval);\n      if (retval === \"X\") setNumsWinX(numsWinX + 1);\n      else setNumsWinO(numsWinO + 1);\n      flag = false;\n    }\n    if (numClicked === sizeBord && flag) {\n      resetGame(\" TIE \", null);\n      setNumsTie(numsTie + 1);\n    }\n  }\n\n  const listener = () => {\n    console.log(\"state in handler: \" + typePlayer);\n    getFunc.setPlayerTypePlace(typePlayer);\n  };\n  React.useEffect(() => {\n    window.addEventListener(\"click\", listener);\n  }, [typePlayer]);\n\n  function handleClickRESETgame() {\n    bord = bord.map(() => \" \");\n    bord[sizeBord] = \"T\";\n    // for (let i = 0; i <sizeBord ; i++) bord[i] = \" \";\n    localStorage.setItem(\"bord\", JSON.stringify(bord));\n    localStorage.setItem(\"tie\", \"0\");\n    localStorage.setItem(\"scoreX\", \"0\");\n    localStorage.setItem(\"scoreO\", \"0\");\n    window.location.reload();\n  }\n  function handleClickSAVEgame() {\n    localStorage.setItem(\"bord\", JSON.stringify(bord));\n    localStorage.setItem(\"tie\", JSON.stringify(numsTie));\n    localStorage.setItem(\"scoreX\", JSON.stringify(numsWinX));\n    localStorage.setItem(\"scoreO\", JSON.stringify(numsWinO));\n  }\n  // const gridRef = useRef(0);\n\n  // addEventListener(\"click\", () => handleClickPlace());\n  // function handleClickPlace() {\n  //   console.log(\"click!\");\n  //}\n  // gridRef.addEventListener(\"click\", () => this.handleClickPlace());\n  // if (document.querySelector(\"grid-game\") !== null)\n  //   document.querySelector(\"grid-game\").addEventListener(\"check\", () => {\n  //     console.log(\"123!!\");\n  //   });\n  // useEffect(() => {\n  //   gridRef.current.addEventListener(\"handleEventPlace\", (ev) => {\n  //     console.log(\"APP click!\");\n  //   });\n  // });\n\n  return (\n    <div className=\"App\">\n      <div className=\"heder\">\n        <div>\n          <h1>The Tic Tok Toe game</h1>\n        </div>\n        <h2>Turn player: {typePlayer}</h2>\n        <div className=\"bnt\">\n          <button-component name=\"reset\" onClick={handleClickRESETgame}>\n            <div slot=\"compButton\">Reset</div>\n          </button-component>\n          <button-component name=\"save\" onClick={handleClickSAVEgame}>\n            <div slot=\"compButton\">Save</div>\n          </button-component>\n        </div>\n      </div>\n      <div className=\"bord\" onClick={handleClick}>\n        <grid-game\n          id=\"gridi\"\n          name={typePlayer}\n          className=\"grid-game\"\n        ></grid-game>\n      </div>\n      <div></div>\n\n      <users-scores className=\"userScores\">\n        <div slot=\"px\" value={numsWinX}>\n          {numsWinX}\n        </div>\n        <div slot=\"tie\" value={numsTie}>\n          {numsTie}\n        </div>\n        <div slot=\"po\" value={numsWinO}>\n          {numsWinO}\n        </div>\n      </users-scores>\n    </div>\n  );\n}\n\nfunction isWin(bord1) {\n  var win = true,\n    player;\n\n  const sqrtSizeBord = Math.sqrt(sizeBord, 2);\n  // console.log(sqrtSizeBord);\n  //check if ther is a win in row\n  for (let i = 0; i < sqrtSizeBord; i += 3) {\n    player = bord1[i];\n    win = true;\n    for (let j = i; j < sqrtSizeBord; j++) {\n      if (bord1[j] !== player) win = false;\n    }\n    if (player !== \" \" && win === true) {\n      return player;\n    }\n  }\n  //check if ther is a win in colomn\n  for (let i = 0; i < sqrtSizeBord; i++) {\n    player = bord1[i];\n    win = true;\n    for (let j = i; j < sizeBord; j += sqrtSizeBord) {\n      if (bord1[j] !== player) win = false;\n    }\n    if (player !== \" \" && win === true) {\n      return player;\n    }\n  }\n  //check if ther is a win in the main diagonal\n  player = bord1[0];\n  win = true;\n  for (let i = 0; i < sizeBord; i += sqrtSizeBord + 1) {\n    if (bord1[i] !== player) win = false;\n  }\n  if (player !== \" \" && win === true) {\n    return player;\n  }\n\n  //check if ther is a win in the main diagonal\n  player = bord1[sqrtSizeBord - 1];\n  win = true;\n  for (let i = sqrtSizeBord - 1; i < sizeBord; i += sqrtSizeBord - 1) {\n    if (bord1[i] !== player) win = false;\n  }\n  if (player !== \" \" && win === true) {\n    return player;\n  }\n\n  return \"nobady\";\n}\n\nfunction resetGame(msg) {\n  alert(msg);\n  bord = bord.map(() => \" \");\n  bord[sizeBord] = \"T\";\n  // for (let i = 0; i <sizeBord ; i++) bord[i] = \" \";\n  localStorage.setItem(\"bord\", JSON.stringify(bord));\n  bord[sizeBord] = \"F\";\n}\n\n// export { namePlayer };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}