{"ast":null,"code":"import \"./Scores.css\";\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<style>\n.body {\n  font-family: \"Arial\", sans-serif;\n  font-size: large;\n  font-weight: bold;\n  display: grid;\n  grid-template-columns: repeat(3, 200px);\n  grid-template-rows: repeat(2, 30px);\n  column-gap: 5px;\n  row-gap: 5px;\n  color: white;\n}\n</style>\n  <div class=\"body\">\n\n    <p> Player X </p>\n    <p> TIE </p>\n    <p> Player O </p>\n\n    <h3><slot name=\"px\" /></h3>\n    <h3><slot name=\"tie\" /></h3>\n    <h3><slot name=\"po\" /></h3>\n\n</div>\n`;\n\nclass Scores extends HTMLElement {\n  constructor() {\n    super();\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this); // this.showInfo = true;\n\n    this.attachShadow({\n      mode: \"open\"\n    });\n    this.shadowRoot.appendChild(template.content.cloneNode(true)); // this.shadowRoot.querySelector(\"h3\").innerText = this.getAttribute(\"value\");\n\n    this.incrementBtn = this.shadowRoot.querySelector(\"[increment]\");\n    this.decrementBtn = this.shadowRoot.querySelector(\"[decrement]\");\n    this.displayVal = this.shadowRoot.querySelector(\"span\");\n  } // get value() {\n  //   return this, this.getAttribute(\"value\");\n  // }\n  // attributeChangedCallback(value) {\n  //   console.log(\"hear!\");\n  //   var x = this.getAttribute(\"px\");\n  //   var o = this.setAttribute(\"po\");\n  //   var tie = this.setAttribute(\"tie\");\n  // }\n\n\n  connectedCallback() {\n    this.incrementBtn.addEventListener(\"click\", this.increment);\n    this.decrementBtn.addEventListener(\"click\", this.decrement);\n\n    if (!this.hasAttribute(\"value\")) {\n      this.setAttribute(\"value\", 1);\n    }\n  }\n\n  increment() {\n    // using +myVariable coerces myVariable into a number,\n    // we do this because the attribute's value is received as a string\n    const step = +this.step || 1;\n    const newValue = +this.value + step;\n\n    if (this.max) {\n      this.value = newValue > +this.max ? +this.max : +newValue;\n    } else {\n      this.value = +newValue;\n    }\n  }\n\n  decrement() {\n    const step = +this.step || 1;\n    const newValue = +this.value - step;\n\n    if (this.min) {\n      this.value = newValue <= +this.min ? +this.min : +newValue;\n    } else {\n      this.value = +newValue;\n    }\n  }\n\n  static get observedAttributes() {\n    return [\"value\"];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    this.displayVal.innerText = this.value;\n  }\n\n  get value() {\n    return this.getAttribute(\"value\");\n  }\n\n  get step() {\n    return this.getAttribute(\"step\");\n  }\n\n  get min() {\n    return this.getAttribute(\"min\");\n  }\n\n  get max() {\n    return this.getAttribute(\"max\");\n  }\n\n  set value(newValue) {\n    this.setAttribute(\"value\", newValue);\n  }\n\n  set step(newValue) {\n    this.setAttribute(\"step\", newValue);\n  }\n\n  set min(newValue) {\n    this.setAttribute(\"min\", newValue);\n  }\n\n  set max(newValue) {\n    this.setAttribute(\"max\", newValue);\n  }\n\n  disconnectedCallback() {\n    this.incrementBtn.removeEventListener(\"click\", this.increment);\n    this.decrementBtn.removeEventListener(\"click\", this.decrement);\n  } // attributeChangedCallback() {\n  //   this.innerHTML = `<style>\n  //   .body {\n  //     max-width: 600px;\n  //     font-family: \"Arial\", sans-serif;\n  //     font-size: large;\n  //     font-weight: bold;\n  //     display: grid;\n  //     grid-template-columns: repeat(3, 1fr);\n  //     grid-template-rows: repeat(2, 1fr);\n  //     column-gap: 5px;\n  //     row-gap: 5px;\n  //     color: red;\n  //   }\n  //   </style>\n  //     <div class=\"body\">\n  //       <p> Player X </p>\n  //       <p> TIE </p>\n  //       <p> Player O </p>\n  //       <p><slot name=\"px\" /></p>\n  //       <p><slot name=\"tie\" /></p>\n  //       <p><slot name=\"po\" /></p>\n  //   </div>\n  //   `;\n  // }\n  // connectedCallback() {\n  //   this.innerHTML = `\n  // <div class=\"user-scores\">\n  //       <h3>Player X <h3>\n  //       <h3>TIE<h3>\n  //       <h3>Player O <h3>\n  //       <p><slot name=\"px\" /></p>\n  //       <p><slot name=\"tie\" /></p>\n  //       <p><slot name=\"po\" /></p>\n  // </div>\n  // `;\n  // }\n  // this.showInfo = true;\n  // this.attachShadow({ mode: \"open\" });\n  // this.shadowRoot.appendChild(template.content.cloneNode(true));\n  // toggleInfo() {\n  //   this.showInfo = !this.showInfo;\n  //   const info = this.shadowRoot.querySelector(\".user-scores\");\n  //   const toggeleh3 = this.shadowRoot.querySelector(\"#toggle-info\");\n  //   // const toggleBtn = this.shadowRoot.querySelector(\"#toggle-info\");\n  //   if (this.showInfo) {\n  //     // info.style.display = \"block\";\n  //     toggeleh3.innerText = \"Play\";\n  //   } else {\n  //     // info.style.display = \"none\";\n  //     toggeleh3.innerText = \"instructions\";\n  //   }\n  // }\n  // // connectedCallback() {\n  // //   this.shadowRoot\n  // //     .querySelector(\"#toggle-info\")\n  // //     .addEventListener(\"click\", () => this.toggleInfo());\n  // // }\n  // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#toggle-info\").setAttribute(\"value\");\n  // }\n\n\n}\n\nwindow.customElements.define(\"user-scores\", Scores);\nexport default Scores;","map":{"version":3,"sources":["/home/talchen/Desktop/learning/react/game/Tic-Tok-Toe/src/Scores.js"],"names":["template","document","createElement","innerHTML","Scores","HTMLElement","constructor","increment","bind","decrement","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","incrementBtn","querySelector","decrementBtn","displayVal","connectedCallback","addEventListener","hasAttribute","setAttribute","step","newValue","value","max","min","observedAttributes","attributeChangedCallback","name","oldValue","innerText","getAttribute","disconnectedCallback","removeEventListener","window","customElements","define"],"mappings":"AAAA,OAAO,cAAP;AAEA,MAAMA,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAjB;AACAF,QAAQ,CAACG,SAAT,GAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;;AA2BA,MAAMC,MAAN,SAAqBC,WAArB,CAAiC;AAC/BC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB,CAJY,CAMZ;;AACA,SAAKE,YAAL,CAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlB;AACA,SAAKC,UAAL,CAAgBC,WAAhB,CAA4Bb,QAAQ,CAACc,OAAT,CAAiBC,SAAjB,CAA2B,IAA3B,CAA5B,EARY,CASZ;;AACA,SAAKC,YAAL,GAAoB,KAAKJ,UAAL,CAAgBK,aAAhB,CAA8B,aAA9B,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKN,UAAL,CAAgBK,aAAhB,CAA8B,aAA9B,CAApB;AACA,SAAKE,UAAL,GAAkB,KAAKP,UAAL,CAAgBK,aAAhB,CAA8B,MAA9B,CAAlB;AACD,GAd8B,CAe/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,EAAAA,iBAAiB,GAAG;AAClB,SAAKJ,YAAL,CAAkBK,gBAAlB,CAAmC,OAAnC,EAA4C,KAAKd,SAAjD;AACA,SAAKW,YAAL,CAAkBG,gBAAlB,CAAmC,OAAnC,EAA4C,KAAKZ,SAAjD;;AAEA,QAAI,CAAC,KAAKa,YAAL,CAAkB,OAAlB,CAAL,EAAiC;AAC/B,WAAKC,YAAL,CAAkB,OAAlB,EAA2B,CAA3B;AACD;AACF;;AAEDhB,EAAAA,SAAS,GAAG;AACV;AACA;AACA,UAAMiB,IAAI,GAAG,CAAC,KAAKA,IAAN,IAAc,CAA3B;AACA,UAAMC,QAAQ,GAAG,CAAC,KAAKC,KAAN,GAAcF,IAA/B;;AAEA,QAAI,KAAKG,GAAT,EAAc;AACZ,WAAKD,KAAL,GAAaD,QAAQ,GAAG,CAAC,KAAKE,GAAjB,GAAuB,CAAC,KAAKA,GAA7B,GAAmC,CAACF,QAAjD;AACD,KAFD,MAEO;AACL,WAAKC,KAAL,GAAa,CAACD,QAAd;AACD;AACF;;AAEDhB,EAAAA,SAAS,GAAG;AACV,UAAMe,IAAI,GAAG,CAAC,KAAKA,IAAN,IAAc,CAA3B;AACA,UAAMC,QAAQ,GAAG,CAAC,KAAKC,KAAN,GAAcF,IAA/B;;AAEA,QAAI,KAAKI,GAAT,EAAc;AACZ,WAAKF,KAAL,GAAaD,QAAQ,IAAI,CAAC,KAAKG,GAAlB,GAAwB,CAAC,KAAKA,GAA9B,GAAoC,CAACH,QAAlD;AACD,KAFD,MAEO;AACL,WAAKC,KAAL,GAAa,CAACD,QAAd;AACD;AACF;;AAE4B,aAAlBI,kBAAkB,GAAG;AAC9B,WAAO,CAAC,OAAD,CAAP;AACD;;AAEDC,EAAAA,wBAAwB,CAACC,IAAD,EAAOC,QAAP,EAAiBP,QAAjB,EAA2B;AACjD,SAAKN,UAAL,CAAgBc,SAAhB,GAA4B,KAAKP,KAAjC;AACD;;AAEQ,MAALA,KAAK,GAAG;AACV,WAAO,KAAKQ,YAAL,CAAkB,OAAlB,CAAP;AACD;;AAEO,MAAJV,IAAI,GAAG;AACT,WAAO,KAAKU,YAAL,CAAkB,MAAlB,CAAP;AACD;;AAEM,MAAHN,GAAG,GAAG;AACR,WAAO,KAAKM,YAAL,CAAkB,KAAlB,CAAP;AACD;;AAEM,MAAHP,GAAG,GAAG;AACR,WAAO,KAAKO,YAAL,CAAkB,KAAlB,CAAP;AACD;;AAEQ,MAALR,KAAK,CAACD,QAAD,EAAW;AAClB,SAAKF,YAAL,CAAkB,OAAlB,EAA2BE,QAA3B;AACD;;AAEO,MAAJD,IAAI,CAACC,QAAD,EAAW;AACjB,SAAKF,YAAL,CAAkB,MAAlB,EAA0BE,QAA1B;AACD;;AAEM,MAAHG,GAAG,CAACH,QAAD,EAAW;AAChB,SAAKF,YAAL,CAAkB,KAAlB,EAAyBE,QAAzB;AACD;;AAEM,MAAHE,GAAG,CAACF,QAAD,EAAW;AAChB,SAAKF,YAAL,CAAkB,KAAlB,EAAyBE,QAAzB;AACD;;AAEDU,EAAAA,oBAAoB,GAAG;AACrB,SAAKnB,YAAL,CAAkBoB,mBAAlB,CAAsC,OAAtC,EAA+C,KAAK7B,SAApD;AACA,SAAKW,YAAL,CAAkBkB,mBAAlB,CAAsC,OAAtC,EAA+C,KAAK3B,SAApD;AACD,GApG8B,CAsG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AA5K+B;;AA8KjC4B,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA6B,aAA7B,EAA4CnC,MAA5C;AAEA,eAAeA,MAAf","sourcesContent":["import \"./Scores.css\";\n\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<style>\n.body {\n  font-family: \"Arial\", sans-serif;\n  font-size: large;\n  font-weight: bold;\n  display: grid;\n  grid-template-columns: repeat(3, 200px);\n  grid-template-rows: repeat(2, 30px);\n  column-gap: 5px;\n  row-gap: 5px;\n  color: white;\n}\n</style>\n  <div class=\"body\">\n\n    <p> Player X </p>\n    <p> TIE </p>\n    <p> Player O </p>\n\n    <h3><slot name=\"px\" /></h3>\n    <h3><slot name=\"tie\" /></h3>\n    <h3><slot name=\"po\" /></h3>\n\n</div>\n`;\n\nclass Scores extends HTMLElement {\n  constructor() {\n    super();\n\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n\n    // this.showInfo = true;\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n    // this.shadowRoot.querySelector(\"h3\").innerText = this.getAttribute(\"value\");\n    this.incrementBtn = this.shadowRoot.querySelector(\"[increment]\");\n    this.decrementBtn = this.shadowRoot.querySelector(\"[decrement]\");\n    this.displayVal = this.shadowRoot.querySelector(\"span\");\n  }\n  // get value() {\n  //   return this, this.getAttribute(\"value\");\n  // }\n  // attributeChangedCallback(value) {\n  //   console.log(\"hear!\");\n  //   var x = this.getAttribute(\"px\");\n  //   var o = this.setAttribute(\"po\");\n  //   var tie = this.setAttribute(\"tie\");\n  // }\n  connectedCallback() {\n    this.incrementBtn.addEventListener(\"click\", this.increment);\n    this.decrementBtn.addEventListener(\"click\", this.decrement);\n\n    if (!this.hasAttribute(\"value\")) {\n      this.setAttribute(\"value\", 1);\n    }\n  }\n\n  increment() {\n    // using +myVariable coerces myVariable into a number,\n    // we do this because the attribute's value is received as a string\n    const step = +this.step || 1;\n    const newValue = +this.value + step;\n\n    if (this.max) {\n      this.value = newValue > +this.max ? +this.max : +newValue;\n    } else {\n      this.value = +newValue;\n    }\n  }\n\n  decrement() {\n    const step = +this.step || 1;\n    const newValue = +this.value - step;\n\n    if (this.min) {\n      this.value = newValue <= +this.min ? +this.min : +newValue;\n    } else {\n      this.value = +newValue;\n    }\n  }\n\n  static get observedAttributes() {\n    return [\"value\"];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    this.displayVal.innerText = this.value;\n  }\n\n  get value() {\n    return this.getAttribute(\"value\");\n  }\n\n  get step() {\n    return this.getAttribute(\"step\");\n  }\n\n  get min() {\n    return this.getAttribute(\"min\");\n  }\n\n  get max() {\n    return this.getAttribute(\"max\");\n  }\n\n  set value(newValue) {\n    this.setAttribute(\"value\", newValue);\n  }\n\n  set step(newValue) {\n    this.setAttribute(\"step\", newValue);\n  }\n\n  set min(newValue) {\n    this.setAttribute(\"min\", newValue);\n  }\n\n  set max(newValue) {\n    this.setAttribute(\"max\", newValue);\n  }\n\n  disconnectedCallback() {\n    this.incrementBtn.removeEventListener(\"click\", this.increment);\n    this.decrementBtn.removeEventListener(\"click\", this.decrement);\n  }\n\n  // attributeChangedCallback() {\n  //   this.innerHTML = `<style>\n  //   .body {\n  //     max-width: 600px;\n  //     font-family: \"Arial\", sans-serif;\n  //     font-size: large;\n  //     font-weight: bold;\n  //     display: grid;\n  //     grid-template-columns: repeat(3, 1fr);\n  //     grid-template-rows: repeat(2, 1fr);\n  //     column-gap: 5px;\n  //     row-gap: 5px;\n  //     color: red;\n  //   }\n  //   </style>\n  //     <div class=\"body\">\n\n  //       <p> Player X </p>\n  //       <p> TIE </p>\n  //       <p> Player O </p>\n\n  //       <p><slot name=\"px\" /></p>\n  //       <p><slot name=\"tie\" /></p>\n  //       <p><slot name=\"po\" /></p>\n\n  //   </div>\n  //   `;\n  // }\n  // connectedCallback() {\n  //   this.innerHTML = `\n  // <div class=\"user-scores\">\n  //       <h3>Player X <h3>\n  //       <h3>TIE<h3>\n  //       <h3>Player O <h3>\n  //       <p><slot name=\"px\" /></p>\n  //       <p><slot name=\"tie\" /></p>\n  //       <p><slot name=\"po\" /></p>\n  // </div>\n  // `;\n  // }\n\n  // this.showInfo = true;\n  // this.attachShadow({ mode: \"open\" });\n  // this.shadowRoot.appendChild(template.content.cloneNode(true));\n\n  // toggleInfo() {\n  //   this.showInfo = !this.showInfo;\n\n  //   const info = this.shadowRoot.querySelector(\".user-scores\");\n  //   const toggeleh3 = this.shadowRoot.querySelector(\"#toggle-info\");\n\n  //   // const toggleBtn = this.shadowRoot.querySelector(\"#toggle-info\");\n\n  //   if (this.showInfo) {\n  //     // info.style.display = \"block\";\n  //     toggeleh3.innerText = \"Play\";\n  //   } else {\n  //     // info.style.display = \"none\";\n  //     toggeleh3.innerText = \"instructions\";\n  //   }\n  // }\n\n  // // connectedCallback() {\n  // //   this.shadowRoot\n  // //     .querySelector(\"#toggle-info\")\n  // //     .addEventListener(\"click\", () => this.toggleInfo());\n  // // }\n\n  // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#toggle-info\").setAttribute(\"value\");\n  // }\n}\nwindow.customElements.define(\"user-scores\", Scores);\n\nexport default Scores;\n"]},"metadata":{},"sourceType":"module"}