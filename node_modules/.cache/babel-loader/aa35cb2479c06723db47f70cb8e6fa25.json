{"ast":null,"code":"var _initBord;\n\n// import Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\nimport * as getPlayer from \"./App\";\nimport PlaceWEB from \"./OnePlace\";\nimport \"./GridGame.css\"; // var typePlayer = getPlayer.namePlayer;\n// const sizeBord = getBord.sizeBord;\n\nvar numClicked = 0;\nvar initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nconst sizeBord = 9;\nvar emptyBord = [];\n\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\n\nemptyBord[sizeBord] = \"T\";\nconst bord = (_initBord = initBord) !== null && _initBord !== void 0 ? _initBord : emptyBord;\nvar typePlayer = \"X\";\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    var setTry1 = this.getAttribute(\"setTry1\"); // setTry1(false);\n    // console.log(setTry1);\n\n    let el = ``;\n    typePlayer = this.getAttribute(\"name\");\n\n    for (let i = 0; i < sizeBord; i++) {\n      el += `<place-component id=\"placeBtn\" name=${i} typePlayer=${typePlayer}></place-component>`;\n    }\n\n    this.innerHTML += `<div class=\"body\"> ${el} </div>`;\n  }\n\n  attributeChangedCallback(typePlayer, oldValue, newValue) {\n    console.log(\"grid - typeplayer change!\" + name, oldValue, newValue);\n  }\n\n}\n\nwindow.customElements.define(\"grid-game\", GridGame);\nexport default GridGame;","map":{"version":3,"sources":["/home/talchen/Desktop/learning/react/The-Game(Tic-Tac-Toe)/src/GridGame.js"],"names":["getBord","getPlayer","PlaceWEB","numClicked","initBord","localStorage","getItem","JSON","parse","sizeBord","emptyBord","i","bord","typePlayer","GridGame","HTMLElement","constructor","connectedCallback","setTry1","getAttribute","el","innerHTML","attributeChangedCallback","oldValue","newValue","console","log","name","window","customElements","define"],"mappings":";;AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,oBAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,OAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,gBAAP,C,CAEA;AACA;;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAf;AACAF,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAX;AACA,MAAMK,QAAQ,GAAG,CAAjB;AAEA,IAAIC,SAAS,GAAG,EAAhB;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8BE,CAAC,EAA/B,EAAmCD,SAAS,CAACC,CAAD,CAAT,GAAe,GAAf;;AACnCD,SAAS,CAACD,QAAD,CAAT,GAAsB,GAAtB;AAEA,MAAMG,IAAI,gBAAGR,QAAH,iDAAeM,SAAzB;AACA,IAAIG,UAAU,GAAG,GAAjB;;AACA,MAAMC,QAAN,SAAuBC,WAAvB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,OAAO,GAAG,KAAKC,YAAL,CAAkB,SAAlB,CAAd,CADkB,CAElB;AACA;;AACA,QAAIC,EAAE,GAAI,EAAV;AACAP,IAAAA,UAAU,GAAG,KAAKM,YAAL,CAAkB,MAAlB,CAAb;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8BE,CAAC,EAA/B,EAAmC;AACjCS,MAAAA,EAAE,IAAK,uCAAsCT,CAAE,eAAcE,UAAW,qBAAxE;AACD;;AACD,SAAKQ,SAAL,IAAmB,sBAAqBD,EAAG,SAA3C;AACD;;AAEDE,EAAAA,wBAAwB,CAACT,UAAD,EAAaU,QAAb,EAAuBC,QAAvB,EAAiC;AACvDC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BC,IAA1C,EAAgDJ,QAAhD,EAA0DC,QAA1D;AACD;;AAnBgC;;AAqBnCI,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA6B,WAA7B,EAA0ChB,QAA1C;AAEA,eAAeA,QAAf","sourcesContent":["// import Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\nimport * as getPlayer from \"./App\";\nimport PlaceWEB from \"./OnePlace\";\nimport \"./GridGame.css\";\n\n// var typePlayer = getPlayer.namePlayer;\n// const sizeBord = getBord.sizeBord;\nvar numClicked = 0;\nvar initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nconst sizeBord = 9;\n\nvar emptyBord = [];\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\nemptyBord[sizeBord] = \"T\";\n\nconst bord = initBord ?? emptyBord;\nvar typePlayer = \"X\";\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    var setTry1 = this.getAttribute(\"setTry1\");\n    // setTry1(false);\n    // console.log(setTry1);\n    let el = ``;\n    typePlayer = this.getAttribute(\"name\");\n    for (let i = 0; i < sizeBord; i++) {\n      el += `<place-component id=\"placeBtn\" name=${i} typePlayer=${typePlayer}></place-component>`;\n    }\n    this.innerHTML += `<div class=\"body\"> ${el} </div>`;\n  }\n\n  attributeChangedCallback(typePlayer, oldValue, newValue) {\n    console.log(\"grid - typeplayer change!\" + name, oldValue, newValue);\n  }\n}\nwindow.customElements.define(\"grid-game\", GridGame);\n\nexport default GridGame;\n"]},"metadata":{},"sourceType":"module"}