{"ast":null,"code":"import \"./GridGame.css\"; // var initBord = localStorage.getItem(\"bord\");\n// initBord = JSON.parse(initBord);\n// const sizeBord = 9;\n// var emptyBord = [];\n// for (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\n// emptyBord[sizeBord] = \"T\";\n// const bord = initBord ?? emptyBord;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    let el = ``;\n    let typePlayer = this.getAttribute(\"name\");\n    let player1 = this.getAttribute(\"player1\"),\n        player2 = this.getAttribute(\"player2\");\n    const sizeBord = this.getAttribute(\"sizeBord\");\n\n    for (let i = 0; i < sizeBord; i++) {\n      // el += `<place-component id=\"placeBtn\" name=${i} typePlayer=${typePlayer} onClickPlace=\"check\"></place-component>`;\n      el += `<place-component id=\"placeBtn\" name=${i} sizeBord=${sizeBord} typePlayer=${typePlayer} player1=${player1} player2=${player2} onClickPlace=\"check\"></place-component>`;\n    }\n\n    this.innerHTML += `<div class=\"body\"> ${el} </div>`;\n    console.log(\"Game sizeBord:\", sizeBord);\n  }\n\n}\n\nwindow.customElements.define(\"grid-game\", GridGame); // export { sizeBord };\n\nexport default GridGame;","map":{"version":3,"sources":["/home/talchen/Desktop/learning/react/The-Game(Tic-Tac-Toe)/src/components/board/GridGame.js"],"names":["GridGame","HTMLElement","constructor","connectedCallback","el","typePlayer","getAttribute","player1","player2","sizeBord","i","innerHTML","console","log","window","customElements","define"],"mappings":"AAAA,OAAO,gBAAP,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAN,SAAuBC,WAAvB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,EAAE,GAAI,EAAV;AACA,QAAIC,UAAU,GAAG,KAAKC,YAAL,CAAkB,MAAlB,CAAjB;AACA,QAAIC,OAAO,GAAG,KAAKD,YAAL,CAAkB,SAAlB,CAAd;AAAA,QACEE,OAAO,GAAG,KAAKF,YAAL,CAAkB,SAAlB,CADZ;AAEA,UAAMG,QAAQ,GAAG,KAAKH,YAAL,CAAkB,UAAlB,CAAjB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;AACjC;AACAN,MAAAA,EAAE,IAAK,uCAAsCM,CAAE,aAAYD,QAAS,eAAcJ,UAAW,YAAWE,OAAQ,YAAWC,OAAQ,0CAAnI;AACD;;AACD,SAAKG,SAAL,IAAmB,sBAAqBP,EAAG,SAA3C;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,QAA9B;AACD;;AAjBgC;;AAmBnCK,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA6B,WAA7B,EAA0ChB,QAA1C,E,CAEA;;AACA,eAAeA,QAAf","sourcesContent":["import \"./GridGame.css\";\n\n// var initBord = localStorage.getItem(\"bord\");\n// initBord = JSON.parse(initBord);\n// const sizeBord = 9;\n\n// var emptyBord = [];\n// for (let i = 0; i < sizeBord; i++) emptyBord[i] = \" \";\n// emptyBord[sizeBord] = \"T\";\n\n// const bord = initBord ?? emptyBord;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    let el = ``;\n    let typePlayer = this.getAttribute(\"name\");\n    let player1 = this.getAttribute(\"player1\"),\n      player2 = this.getAttribute(\"player2\");\n    const sizeBord = this.getAttribute(\"sizeBord\");\n    for (let i = 0; i < sizeBord; i++) {\n      // el += `<place-component id=\"placeBtn\" name=${i} typePlayer=${typePlayer} onClickPlace=\"check\"></place-component>`;\n      el += `<place-component id=\"placeBtn\" name=${i} sizeBord=${sizeBord} typePlayer=${typePlayer} player1=${player1} player2=${player2} onClickPlace=\"check\"></place-component>`;\n    }\n    this.innerHTML += `<div class=\"body\"> ${el} </div>`;\n    console.log(\"Game sizeBord:\", sizeBord);\n  }\n}\nwindow.customElements.define(\"grid-game\", GridGame);\n\n// export { sizeBord };\nexport default GridGame;\n"]},"metadata":{},"sourceType":"module"}