{"ast":null,"code":"var _jsxFileName = \"/home/talchen/Desktop/learning/react/The-Game(Tic-Tac-Toe)/src/GridGame.js\";\nimport Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bord = getBord.bord;\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<style>\n .body button{\n \t\tborder: 20px;\n     border-color: white;\n     border-radius: 5px;\n \t\t padding: 2px 2px;\n     width: 50px;\n     height: 50px; \n     margin-right: 10px;    \n     font-weight: bold;\n  }\n</style>\n  <div class=\"body\">\n    <button id=\"grid-bord\"><slot name=\"compButton\" /></button>\n  </div>\n`;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super(); // this.attachShadow({ mode: \"open\" }).innerHTML =\n    //   '<h1>your DOM here</h1><pre id=\"content\"></pre>';\n    // /  this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    var typePlayer = \"X\";\n    let i = 0;\n    var gridplaces = bord.map(element => {\n      /*#__PURE__*/\n      _jsxDEV(Place, {\n        name: i,\n        player: typePlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this);\n\n      i++;\n    });\n    console.log(gridplaces); // for (let i = 0; i < 9; i++) {\n    // gridplaces[i] = <Place name={i} player={typePlayer} />;\n    // }\n  }\n\n  set content(val) {// this._content = val;\n    // // render changes\n    // let el = this.shadowRoot.querySelector(\"#content\");\n    // el.textContent = JSON.stringify(this._content, 0, 2);\n    //   var gridplaces;\n    //   for (let i = 0; i < 9; i++) {\n    //     gridplaces[i] = <Place name={i} player={typePlayer} />;\n    //   }\n  }\n\n  get content() {\n    return this._content;\n  } // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#grid-bord\").removeEventListener();\n  // }\n\n\n}\n\nwindow.customElements.define(\"grid-game\", GridGame);\nexport default GridGame;","map":{"version":3,"sources":["/home/talchen/Desktop/learning/react/The-Game(Tic-Tac-Toe)/src/GridGame.js"],"names":["Place","getBord","bord","template","document","createElement","innerHTML","GridGame","HTMLElement","constructor","connectedCallback","typePlayer","i","gridplaces","map","element","console","log","content","val","_content","window","customElements","define"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;AACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAjB;AACAF,QAAQ,CAACG,SAAT,GAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;;AAkBA,MAAMC,QAAN,SAAuBC,WAAvB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,UAAU,GAAG,GAAjB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,UAAU,GAAGX,IAAI,CAACY,GAAL,CAAUC,OAAD,IAAa;AACrC;AAAA,cAAC,KAAD;AAAO,QAAA,IAAI,EAAEH,CAAb;AAAgB,QAAA,MAAM,EAAED;AAAxB;AAAA;AAAA;AAAA;AAAA;;AACAC,MAAAA,CAAC;AACF,KAHgB,CAAjB;AAIAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EAPkB,CAQlB;AACA;AACA;AACD;;AAEU,MAAPK,OAAO,CAACC,GAAD,EAAM,CACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACU,MAAPD,OAAO,GAAG;AACZ,WAAO,KAAKE,QAAZ;AACD,GAjCgC,CAmCjC;AACA;AACA;;;AArCiC;;AAuCnCC,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA6B,WAA7B,EAA0ChB,QAA1C;AAEA,eAAeA,QAAf","sourcesContent":["import Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\n\nconst bord = getBord.bord;\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n<style>\n .body button{\n \t\tborder: 20px;\n     border-color: white;\n     border-radius: 5px;\n \t\t padding: 2px 2px;\n     width: 50px;\n     height: 50px; \n     margin-right: 10px;    \n     font-weight: bold;\n  }\n</style>\n  <div class=\"body\">\n    <button id=\"grid-bord\"><slot name=\"compButton\" /></button>\n  </div>\n`;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n\n    // this.attachShadow({ mode: \"open\" }).innerHTML =\n    //   '<h1>your DOM here</h1><pre id=\"content\"></pre>';\n    // /  this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n  connectedCallback() {\n    var typePlayer = \"X\";\n    let i = 0;\n    var gridplaces = bord.map((element) => {\n      <Place name={i} player={typePlayer} />;\n      i++;\n    });\n    console.log(gridplaces);\n    // for (let i = 0; i < 9; i++) {\n    // gridplaces[i] = <Place name={i} player={typePlayer} />;\n    // }\n  }\n\n  set content(val) {\n    // this._content = val;\n    // // render changes\n    // let el = this.shadowRoot.querySelector(\"#content\");\n    // el.textContent = JSON.stringify(this._content, 0, 2);\n    //   var gridplaces;\n    //   for (let i = 0; i < 9; i++) {\n    //     gridplaces[i] = <Place name={i} player={typePlayer} />;\n    //   }\n  }\n  get content() {\n    return this._content;\n  }\n\n  // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#grid-bord\").removeEventListener();\n  // }\n}\nwindow.customElements.define(\"grid-game\", GridGame);\n\nexport default GridGame;\n"]},"metadata":{},"sourceType":"module"}