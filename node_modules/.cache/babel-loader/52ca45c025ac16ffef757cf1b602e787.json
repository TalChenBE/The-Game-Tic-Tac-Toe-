{"ast":null,"code":"var _initBord;\n\nimport \"./OnePlace.css\";\nimport * as getSizeBord from \"./GridGame\"; // import { type } from \"jquery\";\n\nconst template = document.createElement(\"template\");\nvar typePlayer,\n    numClicked = 0,\n    index,\n    initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nlet sizeBord, bord;\nvar emptyBord = [];\n\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \"W\";\n\nemptyBord[sizeBord] = \"T\"; // let bord = initBord ?? emptyBord;\n// console.log(\"OnePlace bord:\", bord);\n// console.log(\"OnePlace sizeBord:\", sizeBord);\n// var index, player1, player2, nextPlayer;\n\nconst style = `<style>\n.place-button {\n    color: white;\n    font-size: xx-large;\n    width: 100px;\n    height: 100px;\n    background: rgba(0, 0, 0, 0.644);\n    border: none;\n    font-weight: bold;\n  }\n\n  .place-button:hover {\n    background-color: rgba(12, 12, 129, 0.384);\n    font-style: italic;\n    \n  }\n\n  .place-button:focus {\n    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  }\n</style>`;\n\nfunction setPlayerTypePlace(player) {\n  typePlayer = player;\n}\n\nbord = (_initBord = initBord) !== null && _initBord !== void 0 ? _initBord : emptyBord;\nconsole.log(\"OnePlace bord:\", bord);\nconsole.log(\"OnePlace sizeBord:\", sizeBord);\nvar index, player1, player2, nextPlayer;\n\nclass OnePlace extends HTMLElement {\n  constructor() {\n    super();\n    index = parseInt(this.getAttribute(\"name\"), 10);\n    typePlayer = this.getAttribute(\"typePlayer\");\n    player1 = this.getAttribute(\"player1\");\n    player2 = this.getAttribute(\"player2\");\n    sizeBord = this.getAttribute(\"sizeBord\");\n    template.innerHTML = style + ` <button id=\"placeButton\" class=\"place-button\">\n          ${bord[index]}\n        </button>\n      `;\n    this.attachShadow({\n      mode: \"open\"\n    });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  placebutton() {\n    index = this.getAttribute(\"name\");\n\n    if (bord[index] === \" \") {\n      bord[index] = typePlayer;\n      if (typePlayer === player1) nextPlayer = player2;else nextPlayer = player1;\n\n      if (numClicked === sizeBord - 1) {\n        setTimeout(() => {\n          bord[sizeBord] = \"T\";\n        }, 1000);\n      }\n\n      numClicked++;\n      const btn = this.shadowRoot.getElementById(\"placeButton\");\n      btn.innerText = bord[index];\n    }\n  }\n\n  connectedCallback() {\n    this.shadowRoot.querySelector(\"#placeButton\").addEventListener(\"click\", () => this.placebutton());\n  }\n\n  disconnectedCallback() {\n    this.shadowRoot.querySelector(\"#place-button\").removeEventListener();\n  }\n\n}\n\nwindow.customElements.define(\"place-component\", OnePlace);\nexport { bord, numClicked, setPlayerTypePlace, nextPlayer };\nexport default OnePlace;","map":{"version":3,"sources":["/home/talchen/Desktop/learning/react/The-Game(Tic-Tac-Toe)/src/components/board/OnePlace.js"],"names":["getSizeBord","template","document","createElement","typePlayer","numClicked","index","initBord","localStorage","getItem","JSON","parse","sizeBord","bord","emptyBord","i","style","setPlayerTypePlace","player","console","log","player1","player2","nextPlayer","OnePlace","HTMLElement","constructor","parseInt","getAttribute","innerHTML","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","placebutton","setTimeout","btn","getElementById","innerText","connectedCallback","querySelector","addEventListener","disconnectedCallback","removeEventListener","window","customElements","define"],"mappings":"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","sourcesContent":["import \"./OnePlace.css\";\nimport * as getSizeBord from \"./GridGame\";\n// import { type } from \"jquery\";\n\nconst template = document.createElement(\"template\");\n\nvar typePlayer,\n  numClicked = 0,\n  index,\n  initBord = localStorage.getItem(\"bord\");\ninitBord = JSON.parse(initBord);\nlet sizeBord, bord;\n\nvar emptyBord = [];\nfor (let i = 0; i < sizeBord; i++) emptyBord[i] = \"W\";\nemptyBord[sizeBord] = \"T\";\n\n// let bord = initBord ?? emptyBord;\n// console.log(\"OnePlace bord:\", bord);\n// console.log(\"OnePlace sizeBord:\", sizeBord);\n// var index, player1, player2, nextPlayer;\n\nconst style = `<style>\n.place-button {\n    color: white;\n    font-size: xx-large;\n    width: 100px;\n    height: 100px;\n    background: rgba(0, 0, 0, 0.644);\n    border: none;\n    font-weight: bold;\n  }\n\n  .place-button:hover {\n    background-color: rgba(12, 12, 129, 0.384);\n    font-style: italic;\n    \n  }\n\n  .place-button:focus {\n    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  }\n</style>`;\n\nfunction setPlayerTypePlace(player) {\n  typePlayer = player;\n}\n\nbord = initBord ?? emptyBord;\nconsole.log(\"OnePlace bord:\", bord);\nconsole.log(\"OnePlace sizeBord:\", sizeBord);\nvar index, player1, player2, nextPlayer;\nclass OnePlace extends HTMLElement {\n  constructor() {\n    super();\n    index = parseInt(this.getAttribute(\"name\"), 10);\n    typePlayer = this.getAttribute(\"typePlayer\");\n    player1 = this.getAttribute(\"player1\");\n    player2 = this.getAttribute(\"player2\");\n    sizeBord = this.getAttribute(\"sizeBord\");\n    template.innerHTML =\n      style +\n      ` <button id=\"placeButton\" class=\"place-button\">\n          ${bord[index]}\n        </button>\n      `;\n\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  placebutton() {\n    index = this.getAttribute(\"name\");\n    if (bord[index] === \" \") {\n      bord[index] = typePlayer;\n      if (typePlayer === player1) nextPlayer = player2;\n      else nextPlayer = player1;\n      if (numClicked === sizeBord - 1) {\n        setTimeout(() => {\n          bord[sizeBord] = \"T\";\n        }, 1000);\n      }\n      numClicked++;\n\n      const btn = this.shadowRoot.getElementById(\"placeButton\");\n      btn.innerText = bord[index];\n    }\n  }\n\n  connectedCallback() {\n    this.shadowRoot\n      .querySelector(\"#placeButton\")\n      .addEventListener(\"click\", () => this.placebutton());\n  }\n\n  disconnectedCallback() {\n    this.shadowRoot.querySelector(\"#place-button\").removeEventListener();\n  }\n}\nwindow.customElements.define(\"place-component\", OnePlace);\n\nexport { bord, numClicked, setPlayerTypePlace, nextPlayer };\nexport default OnePlace;\n"]},"metadata":{},"sourceType":"module"}