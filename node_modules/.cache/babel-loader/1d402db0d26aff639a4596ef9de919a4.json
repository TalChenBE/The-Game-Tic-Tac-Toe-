{"ast":null,"code":"import Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\nconst bord = getBord.bord;\nconst template = document.createElement(\"template\");\ntemplate.innerHTML;\nvar gridplaces;\nvar htmlInner;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({\n      mode: \"open\"\n    });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    var typePlayer = \"X\";\n    let i = 0;\n    var htmlInner = `<div> aaa </div>`;\n    gridplaces = bord.map(() => {\n      htmlInner = htmlInner + `<Place name=${i} player=${typePlayer} />`;\n      i++;\n    });\n  } // set content(val) {\n  //   // this._content = val;\n  //   // // render changes\n  //   // let el = this.shadowRoot.querySelector(\"#content\");\n  //   // el.textContent = JSON.stringify(this._content, 0, 2);\n  //   //   var gridplaces;\n  //   //   for (let i = 0; i < 9; i++) {\n  //   //     gridplaces[i] = <Place name={i} player={typePlayer} />;\n  //   //   }\n  // }\n\n\n  get content() {\n    return this.gridplaces;\n  } // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#grid-bord\").removeEventListener();\n  // }\n\n\n}\n\nwindow.customElements.define(\"grid-game\", GridGame);\nexport default GridGame;","map":{"version":3,"sources":["/home/talchen/Desktop/learning/react/The-Game(Tic-Tac-Toe)/src/GridGame.js"],"names":["Place","getBord","bord","template","document","createElement","innerHTML","gridplaces","htmlInner","GridGame","HTMLElement","constructor","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","connectedCallback","typePlayer","i","map","window","customElements","define"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;AACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAjB;AACAF,QAAQ,CAACG,SAAT;AACA,IAAIC,UAAJ;AACA,IAAIC,SAAJ;;AAEA,MAAMC,QAAN,SAAuBC,WAAvB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,YAAL,CAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlB;AACA,SAAKC,UAAL,CAAgBC,WAAhB,CAA4BZ,QAAQ,CAACa,OAAT,CAAiBC,SAAjB,CAA2B,IAA3B,CAA5B;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,UAAU,GAAG,GAAjB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIZ,SAAS,GAAI,kBAAjB;AACAD,IAAAA,UAAU,GAAGL,IAAI,CAACmB,GAAL,CAAS,MAAM;AAC1Bb,MAAAA,SAAS,GAAGA,SAAS,GAAI,eAAcY,CAAE,WAAUD,UAAW,KAA9D;AACAC,MAAAA,CAAC;AACF,KAHY,CAAb;AAID,GAfgC,CAiBjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACW,MAAPJ,OAAO,GAAG;AACZ,WAAO,KAAKT,UAAZ;AACD,GA7BgC,CA+BjC;AACA;AACA;;;AAjCiC;;AAmCnCe,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA6B,WAA7B,EAA0Cf,QAA1C;AAEA,eAAeA,QAAf","sourcesContent":["import Place from \"./components/Place\";\nimport * as getBord from \"./components/Place\";\n\nconst bord = getBord.bord;\nconst template = document.createElement(\"template\");\ntemplate.innerHTML;\nvar gridplaces;\nvar htmlInner;\n\nclass GridGame extends HTMLElement {\n  constructor() {\n    super();\n\n    this.attachShadow({ mode: \"open\" });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n  connectedCallback() {\n    var typePlayer = \"X\";\n    let i = 0;\n    var htmlInner = `<div> aaa </div>`;\n    gridplaces = bord.map(() => {\n      htmlInner = htmlInner + `<Place name=${i} player=${typePlayer} />`;\n      i++;\n    });\n  }\n\n  // set content(val) {\n  //   // this._content = val;\n  //   // // render changes\n  //   // let el = this.shadowRoot.querySelector(\"#content\");\n  //   // el.textContent = JSON.stringify(this._content, 0, 2);\n  //   //   var gridplaces;\n  //   //   for (let i = 0; i < 9; i++) {\n  //   //     gridplaces[i] = <Place name={i} player={typePlayer} />;\n  //   //   }\n  // }\n  get content() {\n    return this.gridplaces;\n  }\n\n  // disconnectedCallback() {\n  //   this.shadowRoot.querySelector(\"#grid-bord\").removeEventListener();\n  // }\n}\nwindow.customElements.define(\"grid-game\", GridGame);\n\nexport default GridGame;\n"]},"metadata":{},"sourceType":"module"}